{"version":3,"sources":["chevron.tsx"],"names":["React","useCallback","useMemo","StyleSheet","Svg","Path","Animated","useAnimatedStyle","mix","mixColor","Chevron","sizeIcon","progress","colorIcon","handleIcon","styleChevron","activeBackgroundIcon","inactiveBackgroundIcon","style","backgroundColor","value","transform","rotateZ","Math","PI","hasIcon","renderIcon","undefined","containerAnimatedStyle","styles","container","create","height","width","borderRadius","justifyContent","alignItems"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,GAAP,IAAcC,IAAd,QAA0B,kBAA1B;AACA,OAAOC,QAAP,IAAmBC,gBAAnB,QAA2C,yBAA3C;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,qBAA9B;;AAGA,MAAMC,OAAO,GAAG,QAQK;AAAA,MARJ;AACfC,IAAAA,QADe;AAEfC,IAAAA,QAFe;AAGfC,IAAAA,SAHe;AAIfC,IAAAA,UAJe;AAKfC,IAAAA,YALe;AAMfC,IAAAA,oBANe;AAOfC,IAAAA;AAPe,GAQI;AACnB,QAAMC,KAAK,GAAGX,gBAAgB,CAAC,OAAO;AACpC;AACAY,IAAAA,eAAe,EAAEV,QAAQ,CACvBG,QAAQ,CAACQ,KADc,EAEvBH,sBAFuB,EAGvBD,oBAHuB,CAFW;AAOpCK,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAG,GAAEd,GAAG,CAACI,QAAQ,CAACQ,KAAV,EAAiB,CAAjB,EAAoBG,IAAI,CAACC,EAAzB,CAA6B;AAA9C,KAAD;AAPyB,GAAP,CAAD,CAA9B;AAUA,QAAMC,OAAO,GAAGvB,OAAO,CACrB,mBACE,oBAAC,GAAD;AACE,IAAA,KAAK,EAAES,QADT;AAEE,IAAA,MAAM,EAAEA,QAFV;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,aAAa,EAAC,OANhB;AAOE,IAAA,cAAc,EAAC;AAPjB,kBASE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAC,cAAR;AAAuB,IAAA,MAAM,EAAEE;AAA/B,IATF,CAFmB,EAcrB,CAACA,SAAD,EAAYF,QAAZ,CAdqB,CAAvB;AAgBA,QAAMe,UAAU,GAAGzB,WAAW,CAAC,MAAM;AACnC,QAAIa,UAAU,KAAK,IAAnB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,WAAOA,UAAU,KAAKa,SAAf,GAA2Bb,UAAU,CAACF,QAAD,CAArC,GAAkDa,OAAzD;AACD,GAN6B,EAM3B,CAACX,UAAD,EAAaW,OAAb,EAAsBb,QAAtB,CAN2B,CAA9B;AAQA,QAAMgB,sBAAsB,GAAG1B,OAAO,CACpC,MAAM,CAAC2B,MAAM,CAACC,SAAR,EAAmBZ,KAAnB,EAA0BH,YAA1B,CAD8B,EAEpC,CAACG,KAAD,EAAQH,YAAR,CAFoC,CAAtC;AAKA,sBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEa;AAAtB,KAA+CF,UAAU,EAAzD,CADF;AAGD,CAnDD;;AAqDA,eAAehB,OAAf;AAEA,MAAMmB,MAAM,GAAG1B,UAAU,CAAC4B,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,KAAK,EAAE,EAFE;AAGTC,IAAAA,YAAY,EAAE,KAAK,CAHV;AAITC,IAAAA,cAAc,EAAE,QAJP;AAKTC,IAAAA,UAAU,EAAE,QALH;AAMTjB,IAAAA,eAAe,EAAE;AANR;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { mix, mixColor } from 'react-native-redash';\nimport type { IChevronProps } from './types';\n\nconst Chevron = ({\n  sizeIcon,\n  progress,\n  colorIcon,\n  handleIcon,\n  styleChevron,\n  activeBackgroundIcon,\n  inactiveBackgroundIcon,\n}: IChevronProps) => {\n  const style = useAnimatedStyle(() => ({\n    // @ts-ignore\n    backgroundColor: mixColor(\n      progress.value,\n      inactiveBackgroundIcon,\n      activeBackgroundIcon\n    ),\n    transform: [{ rotateZ: `${mix(progress.value, 0, Math.PI)}rad` }],\n  }));\n\n  const hasIcon = useMemo(\n    () => (\n      <Svg\n        width={sizeIcon}\n        height={sizeIcon}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <Path d=\"M6 9l6 6 6-6\" stroke={colorIcon} />\n      </Svg>\n    ),\n    [colorIcon, sizeIcon]\n  );\n  const renderIcon = useCallback(() => {\n    if (handleIcon === null) {\n      return null;\n    }\n\n    return handleIcon !== undefined ? handleIcon(progress) : hasIcon;\n  }, [handleIcon, hasIcon, progress]);\n\n  const containerAnimatedStyle = useMemo(\n    () => [styles.container, style, styleChevron],\n    [style, styleChevron]\n  );\n\n  return (\n    <Animated.View style={containerAnimatedStyle}>{renderIcon()}</Animated.View>\n  );\n};\n\nexport default Chevron;\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 30,\n    width: 30,\n    borderRadius: 30 / 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#525251',\n  },\n});\n"]}