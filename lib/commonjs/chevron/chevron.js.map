{"version":3,"sources":["chevron.tsx"],"names":["Chevron","sizeIcon","progress","colorIcon","handleIcon","styleChevron","activeBackgroundIcon","inactiveBackgroundIcon","style","backgroundColor","value","transform","rotateZ","Math","PI","hasIcon","renderIcon","undefined","containerAnimatedStyle","styles","container","StyleSheet","create","height","width","borderRadius","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGA,MAAMA,OAAO,GAAG,QAQK;AAAA,MARJ;AACfC,IAAAA,QADe;AAEfC,IAAAA,QAFe;AAGfC,IAAAA,SAHe;AAIfC,IAAAA,UAJe;AAKfC,IAAAA,YALe;AAMfC,IAAAA,oBANe;AAOfC,IAAAA;AAPe,GAQI;AACnB,QAAMC,KAAK,GAAG,6CAAiB,OAAO;AACpC;AACAC,IAAAA,eAAe,EAAE,iCACfP,QAAQ,CAACQ,KADM,EAEfH,sBAFe,EAGfD,oBAHe,CAFmB;AAOpCK,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAG,GAAE,4BAAIV,QAAQ,CAACQ,KAAb,EAAoB,CAApB,EAAuBG,IAAI,CAACC,EAA5B,CAAgC;AAA9C,KAAD;AAPyB,GAAP,CAAjB,CAAd;AAUA,QAAMC,OAAO,GAAG,oBACd,mBACE,6BAAC,uBAAD;AACE,IAAA,KAAK,EAAEd,QADT;AAEE,IAAA,MAAM,EAAEA,QAFV;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,aAAa,EAAC,OANhB;AAOE,IAAA,cAAc,EAAC;AAPjB,kBASE,6BAAC,oBAAD;AAAM,IAAA,CAAC,EAAC,cAAR;AAAuB,IAAA,MAAM,EAAEE;AAA/B,IATF,CAFY,EAcd,CAACA,SAAD,EAAYF,QAAZ,CAdc,CAAhB;AAgBA,QAAMe,UAAU,GAAG,wBAAY,MAAM;AACnC,QAAIZ,UAAU,KAAK,IAAnB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,WAAOA,UAAU,KAAKa,SAAf,GAA2Bb,UAAU,CAACF,QAAD,CAArC,GAAkDa,OAAzD;AACD,GANkB,EAMhB,CAACX,UAAD,EAAaW,OAAb,EAAsBb,QAAtB,CANgB,CAAnB;AAQA,QAAMgB,sBAAsB,GAAG,oBAC7B,MAAM,CAACC,MAAM,CAACC,SAAR,EAAmBZ,KAAnB,EAA0BH,YAA1B,CADuB,EAE7B,CAACG,KAAD,EAAQH,YAAR,CAF6B,CAA/B;AAKA,sBACE,6BAAC,8BAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEa;AAAtB,KAA+CF,UAAU,EAAzD,CADF;AAGD,CAnDD;;eAqDehB,O;;;AAEf,MAAMmB,MAAM,GAAGE,wBAAWC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,MAAM,EAAE,EADC;AAETC,IAAAA,KAAK,EAAE,EAFE;AAGTC,IAAAA,YAAY,EAAE,KAAK,CAHV;AAITC,IAAAA,cAAc,EAAE,QAJP;AAKTC,IAAAA,UAAU,EAAE,QALH;AAMTlB,IAAAA,eAAe,EAAE;AANR;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { mix, mixColor } from 'react-native-redash';\nimport type { IChevronProps } from './types';\n\nconst Chevron = ({\n  sizeIcon,\n  progress,\n  colorIcon,\n  handleIcon,\n  styleChevron,\n  activeBackgroundIcon,\n  inactiveBackgroundIcon,\n}: IChevronProps) => {\n  const style = useAnimatedStyle(() => ({\n    // @ts-ignore\n    backgroundColor: mixColor(\n      progress.value,\n      inactiveBackgroundIcon,\n      activeBackgroundIcon\n    ),\n    transform: [{ rotateZ: `${mix(progress.value, 0, Math.PI)}rad` }],\n  }));\n\n  const hasIcon = useMemo(\n    () => (\n      <Svg\n        width={sizeIcon}\n        height={sizeIcon}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <Path d=\"M6 9l6 6 6-6\" stroke={colorIcon} />\n      </Svg>\n    ),\n    [colorIcon, sizeIcon]\n  );\n  const renderIcon = useCallback(() => {\n    if (handleIcon === null) {\n      return null;\n    }\n\n    return handleIcon !== undefined ? handleIcon(progress) : hasIcon;\n  }, [handleIcon, hasIcon, progress]);\n\n  const containerAnimatedStyle = useMemo(\n    () => [styles.container, style, styleChevron],\n    [style, styleChevron]\n  );\n\n  return (\n    <Animated.View style={containerAnimatedStyle}>{renderIcon()}</Animated.View>\n  );\n};\n\nexport default Chevron;\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 30,\n    width: 30,\n    borderRadius: 30 / 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#525251',\n  },\n});\n"]}